{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/home/home/queries.js","queries/system/get_user.js","tools/user_tools.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/ui/ButtonBack.jsx","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationBase.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/HasPermissionWrapper.js","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/ui/ButtonExport.jsx","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","tools/confirm_delete.js","components/finance/invoices/FinanceInvoices.jsx","tools/refresh_token_and_open_export_link.js","tools/date_tools.js","components/finance/invoices/export/yupSchema.js","components/ui/CSDatePicker.jsx","components/ui/ButtonFormCancel.jsx","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBranding.jsx","tools/custom_file_input_label_style.js","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/appointment_categories/appointments/queries.js","components/organization/appointment_categories/appointments/OrganizationAppointments.jsx","components/organization/appointment_categories/appointments/yupSchema.js","components/organization/appointment_categories/appointments/OrganizationAppointmentForm.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentAdd.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentEdit.jsx","components/organization/appointment_categories/queries.js","components/organization/appointment_categories/OrganizationAppointmentCategories.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryForm.jsx","components/organization/appointment_categories/yupSchema.js","components/organization/appointment_categories/OrganizationAppointmentCategoryAdd.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryEdit.jsx","components/organization/appointment_categories/appointments/prices/queries.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices.jsx","components/organization/appointment_categories/appointments/prices/yupSchema.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceForm.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/ui/ButtonDelete.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/ui/ButtonFormSubmit.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/ui/FileProtectedDownloadTableButton.jsx","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/relations/accounts/memberships/queries.js","components/relations/accounts/memberships/AccountMemberships.jsx","components/relations/accounts/memberships/yupSchema.js","components/relations/accounts/memberships/AccountMembershipForm.jsx","components/relations/accounts/memberships/AccountMembershipAdd.jsx","components/relations/accounts/memberships/AccountMembershipEdit.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","queries/accounts/get_account.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/ui/SubscriptionCreditsMutationType.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/schedule/home/ScheduleHome.jsx","components/schedule/appointments/tools.js","components/schedule/appointments/ScheduleAppointmentsFilter.jsx","components/schedule/appointments/queries.js","components/schedule/appointments/ScheduleAppointments.jsx","components/schedule/appointments/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/appointments/all/AppointmentEditMenu.jsx","components/schedule/appointments/ScheduleAppointmentForm.jsx","components/schedule/appointments/ScheduleAppointmentAdd.jsx","components/schedule/appointments/all/AppointmentEditBack.jsx","components/schedule/appointments/all/AppointmentEditBase.jsx","components/schedule/appointments/all/tools.js","components/schedule/appointments/all/edit/ScheduleAppointmentEditAll.jsx","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/queries.js","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/ui/ButtonEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/SettingsMailTemplatesBase.jsx","components/settings/mail/queries.js","components/settings/mail/SettingsMailTemplates.jsx","components/settings/mail/SettingsMailTemplateEditBase.jsx","components/settings/mail/SettingsMailTemplateEditForm.jsx","components/settings/mail/SettingsMailTemplateEdit.jsx","components/settings/mail/tools.js","components/settings/shop/features/queries.js","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","queries/system/get_user_profile.js","components/SiteWrapperShop.js","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/ShopCheckoutProgress.jsx","components/shop/ShopBase.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","token","payload","exp","origIat","refreshToken","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","logout","expired","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","withTranslation","t","urlLogo","children","className","Row","src","alt","autoClose","transition","Slide","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_BACKEND_ANNOUNCEMENTS_QUERY","GET_USER","get_all_permissions","user","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","getNavBarItems","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","now","Date","match","history","useQuery","error","loading","data","avatarURL","urlImageThumbnailSmall","Wrapper","headerProps","href","imageURL","navItems","Item","type","outline","size","color","accountDropdown","name","firstName","lastName","description","options","isDivider","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","getFullYear","target","rel","nav","Col","auto","Header","title","announcements","organizationAnnouncements","length","cards","deck","map","md","Body","dangerouslySetInnerHTML","__html","content","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","addEventListener","removeEventListener","cardTitle","headerContent","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","returnUrl","showNewTask","status","dateTimeFormatMoment","useContext","variables","taskName","fetchMore","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","ColHeader","v4","moment","dateDone","format","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","Group","label","autoComplete","component","disabled","ADD_TASK","useMutation","addTask","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","useState","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","HasPermissionWrapper","check_permission","FinanceHome","linkTitleView","lg","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","buttonText","showBack","archived","setArchived","refetch","archiveCostcenter","headerOptions","Options","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","updateCostcenter","initialData","financeCostcenter","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","glaccounts","financeGlaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","financeGlaccount","get_list_query_variables","queryVars","getItem","undefined","url","getDefaultValue","defaultValue","onChange","event","key","updateLocalStorageAndRefetch","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","confirm_delete","msgConfirm","msgDescription","msgSuccess","deleteFunction","functionVariables","confirmAlert","customUI","onClose","location","dateFormat","pathname","fetchPolicy","deleteFinanceInvoice","invoices","financeInvoices","invoiceNumber","account","relationCompany","relationContactName","Small","summary","trunc","dateSent","dateDue","totalDisplay","balanceDisplay","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","open","dateToLocalISO","date","dateToLocalISOTime","getHours","getMinutes","slice","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","INVOICES_EXPORT_SCHEMA","dateStart","dateEnd","selected","onBlur","isClearable","placeholderText","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","role","setFieldValue","setFieldTouched","frequencyType","startOf","setDateStart","endOf","setDateEnd","setStatus","prepared","setPrepared","setExportUrl","isoDateStart","isoDateEnd","touched","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","inputData","e","quantity","price","financeTaxRate","financeTaxRates","percentage","rateType","Object","keys","updateInvoiceItem","setTouched","refetchInvoice","updateItem","updating","setUpdating","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","setTimeout","updateLineNumber","statusColor","provided","snapshot","ref","innerRef","droppableProps","idx","draggableProps","dragHandleProps","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","initialTab","subtotalDisplay","taxDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","organization","address","phone","email","registration","taxRegistration","creditInvoiceNumber","relationCompanyRegistration","relationCompanyTaxRegistration","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","cancelAndCreateCreditInvoice","export_url","payment_add_url","toggle","triggerContent","creditInvoiceId","cancelAndCreateCreditFinanceInvoice","ml","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","showEditBack","archiveInvoiceGroup","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","Label","checked","addInvoiceGroup","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","fullName","amount","ADD_FINANCE_INVOICE_PAYMENT","onCompleted","addInvoicePayment","balance","GET_INVOICE_PAYMENT_QUERY","UPDATE_FINANCE_INVOICE_PAYMENT","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","orders","financeOrders","createdAt","batchType","toUpperCase","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","financePaymentBatches","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","subTitle","RootComponent","List","appSettings","timeFormatMoment","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","create","category","financePaymentBatchCategories","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","order","financeOrder","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","updatePaymentMethod","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_CLASSPASSES_SOLD_QUERY","GET_CLASSPASSES_ACTIVE_QUERY","refetchData","previousYear","parseInt","currentYear","nextYear","export_url_active","export_url_sold","loadingSold","errorSold","dataSold","refetchSold","loadingActive","errorActive","dataActive","refetchActive","data_sold_label","chart_data_sold","insightAccountClasspassesSold","data_active_label","chart_data_active","insightAccountClasspassesActive","style","height","x","columns","colors","sold","names","axis","y","bottom","show","left","right","tooltip","point","GET_REVENUE_TOTAL_QUERY","GET_REVENUE_SUBTOTAL_QUERY","GET_REVENUE_TAX_QUERY","loadingTotal","errorTotal","dataTotal","refetchTotal","loadingSubtotal","errorSubtotal","dataSubtotal","refetchSubtotal","loadingTax","errorTax","dataTax","refetchTax","data_label_total","chart_data_total","insightRevenueTotal","data_label_subtotal","chart_data_subtotal","insightRevenueSubtotal","data_label_tax","chart_data_tax","insightRevenueTax","total","subtotal","tax","GET_SUBSCRIPTIONS_SOLD_QUERY","GET_SUBSCRIPTIONS_ACTIVE_QUERY","insightAccountSubscriptionsSold","insightAccountSubscriptionsActive","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","accountClasspasses","organizationClasspass","classpasses","subscriptions","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","UPDATE_ORGANIZATION","updateOrganization","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoShopHeader","urlLogoSelfCheckin","customFileInputLabelStyle","whiteSpace","display","overflow","formTitle","inputFileName","fileInputLabel","handleFileInputChange","updateField","update_field","fileName","setFileName","useRef","files","inputVars","reader","FileReader","onload","reader_event","b64_enc_file","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","file","current","readAsDataURL","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","announcementId","updateAnnouncement","organizationAnnouncement","GET_APPOINTMENTS_QUERY","GET_APPOINTMENT_QUERY","GET_INPUT_VALUES_QUERY","ARCHIVE_APPOINTMENT","organizationAppointmentCategory","category_id","appointments","organizationAppointments","organizationAppointmentPrices","mutation","archiveAppointmentCategorysRoom","APPOINTMENT_SCHEMA","ADD_APPOINTMENT","addAppointment","UPDATE_APPOINTMENT","OrganizationAppointmentEdit","organizationAppointment","initialGlaccount","initialCostcenter","updateLocation","GET_APPOINTMENT_CATEGORIES_QUERY","GET_APPOINTMENT_CATEGORY_QUERY","ARCHIVE_APPOINTMENT_CATEGORY","appointment_categories","organizationAppointmentCategories","archiveLocation","APPOINTMENT_CATEGORY_SCHEMA","ADD_ORGANIZATION_APPOINTMENT_CATEGORY","addAppointmentCategory","UPDATE_APPOINTMENT_CATEGORY","OrganizationAppointmentCategoryEdit","updateAppointmentCategory","GET_APPOINTMENT_PRICES_QUERY","GET_APPOINTMENT_PRICE_QUERY","DELETE_APPOINTMENT_PRICE","appointment_id","prices","deleteAppointmentPrice","APPOINTMENT_PRICE_SCHEMA","accountInstructorProfiles","ADD_APPOINTMENT_PRICE","OrganizationAppointmentPriceForm","UPDATE_APPOINTMENT_PRICE","OrganizationAppointmentPriceEdit","organizationAppointmentPrice","initialAccount","initialFinanceTaxRate","Fragment","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","organizationClasspasses","trialPass","unlimited","classes","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","organizationMembership","updateClasspass","initialTaxRate","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","classtypes","organizationClasstypes","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","organizationClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","pageHeaderButtonList","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","organizationDocuments","ISODateString","urlDocument","addDocument","documentFileName","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday","holiday_locations","locationId","organizationLocation","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","LOCATION_SCHEMA","addLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","updateLocationRoom","organizationLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","levels","organizationLevels","LEVEL_SCHEMA","addLevel","updateLevel","organizationLevel","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","shifts","organizationShifts","SHIFT_SCHEMA","addShift","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","creditAccumulationDays","createSubscription","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteFunctionVariables","deleteSubscriptionPrice","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","setState","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","instructor","employee","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","updateAccountActive","deleteAccount","accounts","reverse","subscription","classpass","classesRemainingDisplay","first_name","last_name","ACCOUNT_SCHEMA","addAccount","accountId","createAccount","ISO_COUNTRY_CODES","dateOfBirth","emergency","mobile","postcode","city","country","Code","Name","keyNumber","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","avatarSize","inline","placement","activeLink","transparent","GroupItem","back","account_id","headerTitle","updateAccount","gender","input_vars","updateImage","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","accountBankAccount","accountBankAccounts","mandates","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","timeFormat","deleteScheduleItemAttendance","scheduleItem","timeStart","scheduleItemAttendances","bookingStatus","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","protectedMediaUrl","deleteAccountDocument","accountDocuments","urlProtectedDocument","addAccountDocument","DOCUMENT_SCHEMA","accountDocument","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","FinanceInvoiceStatus","createInvoice","createFinanceInvoice","GET_ACCOUNT_MEMBERSHIPS_QUERY","GET_ACCOUNT_MEMBERSHIP_QUERY","DELETE_ACCOUNT_MEMBERSHIP","accountMemberships","deleteAccountMembership","MEMBERSHIP_SCHEMA","organizationMemberships","CREATE_ACCOUNT_MEMBERSHIP","AccountMembershipAdd","createMembership","UPDATE_ACCOUNT_MEMBERSHIP","AccountMembershipEdit","accountMembership","updateMembership","registrationFeePaid","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","deleteAccountNote","notes","accountNotes","injury","noteBy","addNote","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrderDelete","GET_ACCOUNT","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","invoiceItems","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","Enddate","creditTotal","createAccountSubscription","accountSubscription","tabs","class_tabs_position","activeTab","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","onLoaMore","deleteAccountSubscriptionAltPrice","query_vars","accountSubscriptionAltPrices","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","mutationType","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","mutationAmount","ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","addSubscriptionCredit","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","updateSubscriptionCredit","accountSubscriptionCredit","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","financeInvoiceId","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","events","education","bio","urlBio","updateAccountInstructorProfile","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","businesses","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","business","emailContact","emailBilling","phone2","business_id","ScheduleHome","orderBy","dateFrom","dateUntil","DELETE_SCHEDULE_APPOINTMENT","scheduleAppointments","nextWeekFrom","nextWeekUntil","subtract","currentWeekFrom","currentWeekUntil","scheduleItemId","timeEnd","ItemDivider","badge","badgeType","deleteScheduleAppointment","SCHEDULE_APPOINTMENTS_FILTER_LEVEL","edit_active","instructors_available_active","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","frequencyInterval","CREATE_APPOINTMENT","ScheduleAppointmentAdd","appointmentId","AppointmentEditBase","menu_activeLink","default_card","sidebar_button","initialTimeStart","subtitle","locationRoom","starttime","appointment_edit_all_subtitle","card_title","ScheduleAppointmentEditAll","initialTimeEnd","updateScheduleAppointment","attendanceCountType","represent_instructor","textColor","represent_class_status","get_class_messages","holidayName","selectClass","setLocation","classtype","setClasstype","level","setLevel","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","DELETE_SCHEDULE_CLASS","deleteScheduleClass","scheduleClasses","account2","role2","CLASS_SCHEMA","spaces","walkInSpaces","infoMailContent","createScheduleClass","classId","UPDATE_CLASS","defaultCard","menuActiveLink","class_id","represent_instructor_role","class_edit_all_subtitle","updateScheduleClass","initialLevelID","getAccountsQueryVariables","getEnrollmentsListQueryVariables","showEnded","dateEnd_Isnull","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","deleteScheduleItemEnrollment","editUrl","showCurrent","setShowCurrent","ButtonAddEnrollment","enrollments","queryEnrollmentsData","scheduleItemEnrollments","setSearchName","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","updateScheduleClassEnrollment","scheduleItemEnrollment","allowed","scheduleClassEnrollmentOptions","shopBook","attend","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","addScheduleClassInstructor","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","checkedInIds","classStatus","showSearchResults","setShowSearchResults","class_date","useLazyQuery","getAccounts","called","Search","queryAccountsData","includes","attendance_active","attendancechart_active","pageSubTitle","classDate","class_subtitle","scheduleClass","setAttendanceStatus","updateAttendance","GET_CLASS_ATTENDANCE_COUNT_YEAR","dataLabelCurrentYear","chartDataCurrentYear","insightClassAttendanceCountYear","dataCurrent","dataLabelPreviousYear","chartDataPreviousYear","dataPrevious","startAt","Array","i","range","previous","tick","d","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","blocked","paused","priceDropin","locationID","priceTrial","listType","scheduleClassBookingOptions","scheduleItemPrices","organizationClasspassDropin","organizationClasspassTrial","hasReachedTrialLimit","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","addScheduleClassPrice","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveScheduleEvent","cardHeaderContent","scheduleEvents","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","eventId","pageHeaderOptions","event_id","ScheduleEventEditMenu","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","scheduleItems","countAttendance","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","scheduleItemType","loadingActivity","errorActivity","dataActivity","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","updateMedia","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","deletable","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","a","represent_shift_status","shift","setShift","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","scheduleShifts","createScheduleShift","shiftId","shift_id","shift_edit_all_subtitle","updateScheduleShift","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","ButtonAdd","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","addScheduleShiftAccount","updateScheduleShiftAccount","showSearch","setShowSearch","refetchAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","toLowerCase","settings","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","DATETIME_SCHEMA","system_hostname","queryVariables","hostname","mollie_api_key","mollieApiKey","H4","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","SHOP_FEATURES_SCHEMA","shopFeatures","systemFeatureShop","memberships","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","GET_USER_PROFILE","refreshTokenExp","accountTitle","accountLink","headerImageUrl","getHeaderImageUrl","xs","sm","DisplayClassInfo","classData","GET_ACCOUNT_CLASS_QUERY","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","loadingUser","errorUser","dataUser","updateScheduleItemAttendance","scheduleItemAttendance","cancellationPossible","complete","QUERY_ACCOUNT_CLASSPASSES","skip","ShopAccountClasspassesBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","cancelFunction","cancelOrder","UPDATE_PROFILE","updateProfile","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","checkoutProgress","color_order","color_payment","color_complete","addOn","alreadyBooked","classType","class_info","bookingOpenOn","CREATE_ORDER","buttonBook","capitalize","word","lower","charAt","isBefore","prevWeekFrom","prevWeekUntil","media","urlImageThumbnailLarge","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","Category","isEarlybirdPrice","Price","totalPriceDisplay","AttributeList","AttributeItem","Button","tickets","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","GET_ORDER_QUERY","orderItems","attendanceDate","msgNextStep","buttonNext","createFinanceOrderPaymentLink","financeOrderPaymentLink","subHeader","contentText","paymentText","schduleItemAttendances","btnLink","GET_ORGANIZATION_CLASSPASSES_QUERY","pageTitle","loadingClass","errorClass","dataClass","displayCheckoutInfo","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","ShopSubscriptionPricingCard","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","vars","messages","etFieldValue","esetFieldTouched","preventDefault","password","doTokenAuth","username","next","tokenAuth","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","SetCurrentUrlAsNext","PrivateRoute","rest","authTokenExpired","path","ContinueAsYouAre","render","LoginRequired","SessionExpired","tokenExp","reload","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","exact","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionCreditExpiration","AutomationAccountSubscriptionCreditExpirationAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","ScheduleAppointments","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightClasspasses","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMollie","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","errorLink","onError","networkError","operation","forward","response","forEach","refreshTokenExpired","Observable","observer","client","mutate","subscriber","subscribe","httpLink","createHttpLink","uri","credentials","authLink","setContext","request","headers","Authorization","ApolloClient","from","cache","InMemoryCache","App","ApolloProvider","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.7b244eaf.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      token\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoiceEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      console.log('found permission')\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.announcements.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  // Data\n  return (\n    <HomeHomeBase>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html:node.content }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits_expiration.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits_expiration.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits_expiration\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(!pageInfo) ? '':\n              (pageInfo.hasNextPage) ? \n                <Button \n                  link\n                  onClick={onLoadMore} \n                  >\n                  {t('general.load_more')}\n                </Button>\n               : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\n\nfunction AutomationAccountSubscriptionCreditExpirationBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits_expiration/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationBase))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\nfunction AutomationAccountSubscriptionCreditExpiration({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditExpirationBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits_expiration.title_card')}\n        pageInfo={taskResults.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpiration))","import React, {useState} from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\n\n\nconst ADD_TASK = gql`\n  mutation ExpireAccountSubscriptionCredit($input: ExpireAccountSubscriptionCreditInput!) {\n    expireAccountSubscriptionCredit(input:$input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditExpirationAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  let [isSubmitting, setSubmitting] = useState(false)\n  const returnUrl = \"/automation/account/subscriptions/credits_expiration\"\n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits_expiration.title_add')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              {t(\"automation.account.subscriptions.credits_expiration.explanation_new_expiration\")}\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n          color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            onClick={() => {\n              setSubmitting(true)\n              addTask({ variables: {\n                input: {}\n              }, refetchQueries: [\n                {query: GET_TASK_RESULT_QUERY, \n                  variables: {\n                    taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n                }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits_expiration.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n          >\n            {t('general.run_task')} <Icon name=\"chevron-right\" />\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    }\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    }\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({permission, resource, children}) {\n  const {loading, error, data} = useQuery(GET_USER)\n  \n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default HasPermissionWrapper","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\n\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}\n                  hasCardBody={false}\n                  pageInfo={invoices.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: invoices.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoices.edges\n                        const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoices at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoices: {\n                                __typename: previousResult.financeInvoices.__typename,\n                                edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.relation')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoicesStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      {node.invoiceNumber}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.account) ? \n                      <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                        {(node.relationCompany) ? node.relationCompany: node.relationContactName}\n                      </Link> :\n                      (node.relationCompany) ? node.relationCompany: node.relationContactName\n                    }\n                    <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(20)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    {moment(node.dateDue).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import CSLS from './cs_local_storage'\nimport { CSAuth } from './authentication';\n\nexport function refreshTokenAndOpenExportLinkInNewTab(doTokenRefresh, history, exportUrl) {  \n  const refreshToken = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n\n  doTokenRefresh({ variables: { refreshToken: refreshToken }})\n    .then(({data}) => {\n      CSAuth.updateTokenInfo(data.refreshToken)\n      const token = data.refreshToken.token\n      //Add authentication headers in URL\n      var url = `${exportUrl}/${token}`;\n\n      window.open(url, \"_blank\")\n      // history.push(export_url)\n    }).catch((error) => {\n      console.log(error)\n      history.push(\"/#/user/login\")\n    })\n}\n","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  \n  console.log(\"########\")\n  console.log(initialData)\n  console.log(dateSent)\n  console.log(dateDue)\n\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: organization.address}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {console.log(initialData)}\n        {(initialData.financeInvoice.creditInvoiceNumber) ?\n          t(\"finance.invoice.credit_invoice_for\") + \": \" + initialData.financeInvoice.creditInvoiceNumber\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditToForm = ({ t, isSubmitting, errors, touched, handleChange, setFieldTouched }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t(\"finance.invoices.relation_company\")}>\n        <Field type=\"text\" \n                name=\"relationCompany\" \n                className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationCompany\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyRegistration\" \n                    className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyRegistartion\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyTaxRegistration\" \n                    className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyTaxRegistration\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n        <Field type=\"text\" \n                name=\"relationContactName\" \n                className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationContactName\", true, true)\n                }}\n        />\n        <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_address\")}>\n            <Field type=\"text\" \n                    name=\"relationAddress\" \n                    className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationAddress\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n            <Field type=\"text\" \n                    name=\"relationPostcode\" \n                    className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationPostcode\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_city\")}>\n            <Field type=\"text\" \n                    name=\"relationCity\" \n                    className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCity\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_country\")}>\n            <Field type=\"text\" \n                    name=\"relationCountry\" \n                    className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCountry\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, initialData }) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card title={t('general.to')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            relationCompany: initialData.financeInvoice.relationCompany, \n            relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: initialData.financeInvoice.relationContactName, \n            relationAddress: initialData.financeInvoice.relationAddress, \n            relationPostcode: initialData.financeInvoice.relationPostcode, \n            relationCity: initialData.financeInvoice.relationCity, \n            relationCountry: initialData.financeInvoice.relationCountry, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html:node.note }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  console.log(data)\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo initialData={data} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions\n            initialData={data}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { inputData.financeInvoice.account.fullName } <br />\n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nconst ADD_FINANCE_INVOICE_PAYMENT = gql`\n  mutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n    createFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  console.log(data)\n  const orders = data.financeOrders\n  console.log(orders)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber} <br />\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: String!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: String!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  \n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status !== \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.classpasses.title\")}</h5>\n                    {t(\"insight.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.subscriptions.title\")}</h5>\n                    {t(\"insight.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialcards\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.revenue.title\")}</h5>\n                    {t(\"insight.revenue.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASSES_SOLD_QUERY = gql`\n  query InsightAccountClasspassesSold($year: Int!) {\n    insightAccountClasspassesSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_CLASSPASSES_ACTIVE_QUERY = gql`\n  query InsightAccountClasspassesActive($year: Int!) {\n    insightAccountClasspassesActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_CLASSPASSES_SOLD_QUERY, GET_CLASSPASSES_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_CLASSPASSES_SOLD_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_CLASSPASSES_ACTIVE_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.classpasses.sold.title\")\n  const chart_data_sold = dataSold.insightAccountClasspassesSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.classpasses.active.title\")\n  const chart_data_active = dataActive.insightAccountClasspassesActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightClasspassesBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightClasspassesBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_TOTAL_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_REVENUE_SUBTOTAL_QUERY = gql`\n  query InsightRevenueSubTotal($year: Int!) {\n    insightRevenueSubtotal(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_REVENUE_TAX_QUERY = gql`\n  query InsightRevenueTax($year: Int!) {\n    insightRevenueTax(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport {\n  colors,\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_TOTAL_QUERY, GET_REVENUE_SUBTOTAL_QUERY, GET_REVENUE_TAX_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)\n\n  const { \n    loading: loadingTotal, \n    error: errorTotal, \n    data: dataTotal,\n    refetch: refetchTotal\n   } = useQuery(GET_REVENUE_TOTAL_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingSubtotal, \n    error: errorSubtotal, \n    data: dataSubtotal,\n    refetch: refetchSubtotal\n   } = useQuery(GET_REVENUE_SUBTOTAL_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingTax, \n    error: errorTax, \n    data: dataTax,\n    refetch: refetchTax\n   } = useQuery(GET_REVENUE_TAX_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingTotal || loadingSubtotal || loadingTax) {\n    return (\n      <InsightRevenueBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightRevenueBase>\n    )\n  }\n\n  if (errorTotal || errorSubtotal || errorTax) {\n    return (\n      <InsightRevenueBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightRevenueBase>\n    )\n  }\n\n  function refetchData(year) {\n    refetchTotal({year: year})\n    refetchSubtotal({year: year})\n    refetchTax({year: year})\n  }\n\n  console.log(dataTotal)\n  console.log(dataSubtotal)\n\n  const data_label_total = t(\"insight.revenue.total.title\")\n  const chart_data_total = dataTotal.insightRevenueTotal.data\n  console.log(\"chart_data total\")\n  console.log(data_label_total, ...chart_data_total)\n\n  const data_label_subtotal = t(\"insight.revenue.subtotal.title\")\n  const chart_data_subtotal = dataSubtotal.insightRevenueSubtotal.data\n  console.log(\"chart_data subtotal\")\n  console.log(data_label_subtotal, ...chart_data_subtotal)\n\n  const data_label_tax = t(\"insight.revenue.tax.title\")\n  const chart_data_tax = dataTax.insightRevenueTax.data\n  console.log(\"chart_data tax\")\n  console.log(data_label_tax, ...chart_data_tax)\n\n\n  return (\n    <InsightRevenueBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.total')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'total', ...chart_data_total],\n                    [ 'subtotal', ...chart_data_subtotal],\n                    [ 'tax', ...chart_data_tax],\n                  ],\n                  type: \"bar\", // default type of chart\n                  // types: {\n                  //   total: \"bar\"\n                  // },\n                  groups: [['subtotal', 'tax']],\n                  colors: {\n                    total: colors[\"blue\"],\n                    subtotal: colors[\"green\"],\n                    tax: colors[\"orange\"],\n                  },\n                  names: {\n                    // name of each serie\n                    total: data_label_total,\n                    subtotal: data_label_subtotal,\n                    tax: data_label_tax,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n            <Card.Footer>\n              {t(\"insight.revenue.total.explanation\")}\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          {/* <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button> */}\n          {/* Export as active as excel sheet */}\n          {/* <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button> */}\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightRevenueBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTIONS_SOLD_QUERY = gql`\n  query InsightAccountSubscriptionsSold($year: Int!) {\n    insightAccountSubscriptionsSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTIONS_ACTIVE_QUERY = gql`\n  query InsightAccountSubscriptionsActive($year: Int!) {\n    insightAccountSubscriptionsActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetchData=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_SUBSCRIPTIONS_SOLD_QUERY, GET_SUBSCRIPTIONS_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\nfunction InsightSubscriptions ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_SUBSCRIPTIONS_SOLD_QUERY, {\n    variables: { year: 2020 }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_SUBSCRIPTIONS_ACTIVE_QUERY, {\n    variables: { year: 2020 }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.subscriptions.sold.title\")\n  const chart_data_sold = dataSold.insightAccountSubscriptionsSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.subscriptions.active.title\")\n  const chart_data_active = dataActive.insightAccountSubscriptionsActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightSubscriptionsBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Form.Group label={t('general.year')}>\n        <Field type=\"number\" \n                name=\"year\" \n                className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.month')}>\n        <Field component=\"select\" \n              name=\"month\" \n              className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              // onChange={(e) => {\n              //   handleChange(e)\n              //   setFieldTouched(\"financeTaxRate\", true, true)\n              // }}\n        >\n          <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n          <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n          <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n          <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n          <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n          <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n          <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n          <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n          <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n          <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n          <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n          <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n        </Field>\n        <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('insight.trialpasses.set_month')}\n      </Button>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { GET_ORGANIZATION_QUERY } from '../queries'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n      }\n    }\n  }\n`\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: values.priority\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: values.priority\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query OrganizationAppointments($after: String, $before: String, $organizationAppointmentCategory: ID!, $archived: Boolean!) {\n    organizationAppointments(first: 15, before: $before, after: $after, organizationAppointmentCategory: $organizationAppointmentCategory, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationAppointmentCategory {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationAppointmentCategory(id: $organizationAppointmentCategory) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointment(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT = gql`\n  mutation ArchiveOrganizationAppointment($input: ArchiveOrganizationAppointmentInput!) {\n    archiveOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointments = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to=\"/organization/appointment_categories\" \n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.appointment_categories.title')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENTS_QUERY} variables={{ archived, organizationAppointmentCategory: match.params.category_id }}>\n             {({ loading, error, data: {organizationAppointments: appointments, organizationAppointmentCategory: location}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <p>{t('organization.appointments.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n\n                // Empty list\n                if (!appointments.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointments.empty_list') : t(\"organization.appointments.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointments.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointments.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.appointment_category')}</strong> {location.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {appointments.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                <Table.Col key={v4()}>\n                                  {node.name}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {(node.displayPublic) ? \n                                    <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                    <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('organization.appointments.instructor_prices')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={ARCHIVE_APPOINTMENT} key={v4()}>\n                                  {(archiveAppointmentCategorysRoom, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                          title={t('general.archive')} \n                                          href=\"\"\n                                          onClick={() => {\n                                            console.log(\"clicked archived\")\n                                            let id = node.id\n                                            archiveAppointmentCategorysRoom({ variables: {\n                                              input: {\n                                              id,\n                                              archived: !archived\n                                              }\n                                      }, refetchQueries: [\n                                          { \n                                            query: GET_APPOINTMENTS_QUERY, \n                                            variables: {\"archived\": archived, organizationAppointmentCategory: match.params.category_id }\n                                          }\n                                      ]}).then(({ data }) => {\n                                        console.log('got data', data);\n                                        toast.success(\n                                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                      }).catch((error) => {\n                                        toast.error((t('general.toast_server_error')) +  error, {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                        console.log('there was an error sending the query', error);\n                                      })\n                                      }}>\n                                        <Icon prefix=\"fa\" name=\"inbox\" />\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/add/\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointments.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.appointments.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","import React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\n\nconst ADD_APPOINTMENT = gql`\n  mutation CreateOrganizationAppointment($input: CreateOrganizationAppointmentInput!) {\n    createOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        organizationAppointmentCategory {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/organization/appointment_categories/appointments/\"\n\nconst OrganizationAppointmentAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointments.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT} onCompleted={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\")}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ name: '', displayPublic: true }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointmentCategory: match.params.category_id,\n                                      name: values.name, \n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointments.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(returnUrl + match.params.category_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateOrganizationAppointment($input: UpdateOrganizationAppointmentInput!) {\n    updateOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const returnUrl = \"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointments.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointment\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialGlaccount = \"\"\n                    if (initialData.financeGlaccount) {\n                      initialGlaccount =  initialData.financeGlaccount.id\n                    } \n\n                    let initialCostcenter = \"\"\n                    if (initialData.financeCostcenter) {\n                      initialCostcenter =  initialData.financeCostcenter.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic,\n                                financeGlaccount: initialGlaccount,\n                                financeCostcenter: initialCostcenter,\n                              }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointments.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointment\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_CATEGORIES_QUERY = gql`\n  query OrganizationAppointmentCategories($after: String, $before: String, $archived: Boolean) {\n    organizationAppointmentCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_CATEGORY_QUERY = gql`\n  query OrganizationAppointmentCategory($id: ID!) {\n    organizationAppointmentCategory(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\n\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT_CATEGORY = gql`\n  mutation ArchiveOrganizationAppointmentCategory($input: ArchiveOrganizationAppointmentCategoryInput!) {\n    archiveOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointmentCategories = ({ t, history, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_CATEGORIES_QUERY} variables={{ archived }}>\n             {({ loading, error, data: {organizationAppointmentCategories: appointment_categories}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <p>{t('organization.appointment_categories.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n                \n                // Empty list\n                if (!appointment_categories.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointment_categories.empty_list') : t(\"organization.appointment_categories.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointment_categories.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointment_categories.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentCategories.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentCategories.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new appointment_categories at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentCategories: {\n                                            __typename: previousResult.organizationAppointmentCategories.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentCategories.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <Table>\n                          <Table.Header>\n                            <Table.Row key={v4()}>\n                              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                            </Table.Row>\n                          </Table.Header>\n                          <Table.Body>\n                              {appointment_categories.edges.map(({ node }) => (\n                                <Table.Row key={v4()}>\n                                  <Table.Col key={v4()}>\n                                    {node.name}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {(node.displayPublic) ? \n                                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                  </Table.Col>\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    {(node.archived) ? \n                                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                      <div>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/edit/\" + node.id)}\n                                                color=\"secondary\">\n                                          {t('general.edit')}\n                                        </Button>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/\" + node.id + \"/appointments/\")}\n                                                color=\"secondary\">\n                                          {t('organization.appointments.title')}\n                                        </Button>\n                                      </div>\n                                    }\n                                  </Table.Col>\n                                  <Mutation mutation={ARCHIVE_APPOINTMENT_CATEGORY} key={v4()}>\n                                    {(archiveLocation, { data }) => (\n                                      <Table.Col className=\"text-right\" key={v4()}>\n                                        <button className=\"icon btn btn-link btn-sm\" \n                                           title={t('general.archive')} \n                                           href=\"\"\n                                           onClick={() => {\n                                             console.log(\"clicked archived\")\n                                             let id = node.id\n                                             archiveLocation({ variables: {\n                                               input: {\n                                                id,\n                                                archived: !archived\n                                               }\n                                        }, refetchQueries: [\n                                            {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": archived }}\n                                        ]}).then(({ data }) => {\n                                          console.log('got data', data);\n                                          toast.success(\n                                            (archived) ? t('general.unarchived'): t('general.archived'), {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                        }).catch((error) => {\n                                          toast.error((t('general.toast_server_error')) +  error, {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                          console.log('there was an error sending the query', error);\n                                        })\n                                        }}>\n                                          <Icon prefix=\"fa\" name=\"inbox\" />\n                                        </button>\n                                      </Table.Col>\n                                    )}\n                                  </Mutation>\n                                </Table.Row>\n                              ))}\n                          </Table.Body>\n                        </Table>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_categories.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategories))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationAppointmentCategoryForm = ({ t, history, isSubmitting, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.appointment_category.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>    \n\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\" type=\"button\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationAppointmentCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\n\n\nconst ADD_ORGANIZATION_APPOINTMENT_CATEGORY = gql`\n  mutation CreateOrganizationAppointmentCategory($input: CreateOrganizationAppointmentCategoryInput!) {\n    createOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/organization/appointment_categories\"\n\nconst OrganizationAppointmentCategoryAdd = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_categories.title_add')}</Card.Title>\n            </Card.Header>\n            <Mutation mutation={ADD_ORGANIZATION_APPOINTMENT_CATEGORY} onCompleted={() => history.push(returnUrl)}> \n                {(addAppointmentCategory, { data }) => (\n                    <Formik\n                        initialValues={{ name: '', displayPublic: true }}\n                        validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                        onSubmit={(values, { setSubmitting }) => {\n                            addAppointmentCategory({ variables: {\n                              input: {\n                                name: values.name, \n                                displayPublic: values.displayPublic\n                              }\n                            }, refetchQueries: [\n                                {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                            ]})\n                            .then(({ data }) => {\n                                console.log('got data', data);\n                                toast.success((t('organization.appointment_categories.toast_add_success')), {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                              }).catch((error) => {\n                                toast.error((t('general.toast_server_error')) +  error, {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                                console.log('there was an error sending the query', error)\n                                setSubmitting(false)\n                              })\n                        }}\n                        >\n                        {({ isSubmitting, errors, values }) => (\n                          <OrganizationAppointmentCategoryForm\n                            isSubmitting={isSubmitting}\n                            errors={errors}\n                            values={values}\n                            returnUrl={returnUrl}\n                          />\n                        )}\n                    </Formik>\n                )}\n                </Mutation>\n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(returnUrl)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_APPOINTMENT_CATEGORIES_QUERY, GET_APPOINTMENT_CATEGORY_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\n\n\nconst UPDATE_APPOINTMENT_CATEGORY = gql`\n  mutation UpdateOrganizationAppointmentCategory($input: UpdateOrganizationAppointmentCategoryInput!) {\n    updateOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentCategoryEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization location edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const returnUrl = \"/organization/appointment_categories\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_categories.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_CATEGORY_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const initialData = data.organizationAppointmentCategory;\n                    console.log('query data')\n                    console.log(data)\n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_CATEGORY} onCompleted={() => history.push(returnUrl)}> \n                      {(updateAppointmentCategory, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic \n                              }}\n                              validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateAppointmentCategory({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic \n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_categories.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                  <OrganizationAppointmentCategoryForm\n                                    isSubmitting={isSubmitting}\n                                    errors={errors}\n                                    values={values}\n                                    returnUrl={returnUrl}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentcategory\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_PRICES_QUERY = gql`\n  query OrganizationAppointmentPrices($after: String, $before: String, $organizationAppointment: ID!) {\n    organizationAppointmentPrices(first: 15, before: $before, after: $after, organizationAppointment: $organizationAppointment) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointment(id: $organizationAppointment) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_PRICE_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointmentPrice(id:$id) {\n      id\n      price\n      account {\n        id\n        fullName\n      }\n      financeTaxRate {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_APPOINTMENT_PRICES_QUERY } from \"./queries\"\n\nconst DELETE_APPOINTMENT_PRICE = gql`\n  mutation DeleteOrganizationAppointmentPrice($input: DeleteOrganizationAppointmentPriceInput!) {\n    deleteOrganizationAppointmentPrice(input: $input) {\n      ok\n    }\n  }\n`\n\nconst OrganizationAppointmentPrices = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('general.appointment')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_PRICES_QUERY} variables={{ organizationAppointment: match.params.appointment_id }}>\n             {({ loading, error, data, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>{t('organization.appointment_prices.error_loading')}</p>\n                  </ContentCard>\n                )\n\n                const prices = data.organizationAppointmentPrices\n\n                // Empty list\n                if (!prices.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>\n                      {t('organization.appointment_prices.empty_list')}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}\n                               pageInfo={prices.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: prices.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.prices_for')} {t('general.appointment')}</strong> {data.organizationAppointment.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {prices.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                {console.log(node)}\n                                <Table.Col key={v4()}>\n                                  {node.account.fullName}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {node.priceDisplay}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + \n                                                match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={DELETE_APPOINTMENT_PRICE} key={v4()}>\n                                  {(deleteAppointmentPrice, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                        title={t('general.delete')} \n                                        href=\"\"\n                                        onClick={() => {\n                                          confirm_delete({\n                                            t: t,\n                                            msgConfirm: t(\"organization.appointment_prices.delete_confirm_msg\"),\n                                            msgDescription: <p>{node.account.fullName} {node.priceDisplay}</p>,\n                                            msgSuccess: t('organization.appointment_prices.deleted'),\n                                            deleteFunction: deleteAppointmentPrice,\n                                            functionVariables: { variables: {\n                                              input: {\n                                                id: node.id\n                                              }\n                                            }, refetchQueries: [\n                                              {query: GET_APPOINTMENT_PRICES_QUERY, variables: { organizationAppointment: match.params.appointment_id }} \n                                            ]}\n                                          })\n                                      }}>\n                                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_prices.add')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_PRICE_SCHEMA = Yup.object().shape({\n    account: Yup.string()\n      .required(t('yup.field_required')),\n    price: Yup.number()\n      .required(t('yup.field_required')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required'))\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n         <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                    name=\"account\" \n                    className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.accountInstructorProfiles.edges.map(({ node }) =>\n                <option value={node.account.id} key={v4()}>{node.account.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n              <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in appointment price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","import React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\nconst ADD_APPOINTMENT_PRICE = gql`\n  mutation CreateOrganizationAppointmentPrice($input: CreateOrganizationAppointmentPriceInput!) {\n    createOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nconst OrganizationAppointmentPriceAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_prices.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT_PRICE} onCompleted={\n                    () => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationAppointment: '', \n                                account: '',\n                                price: '',\n                                financeTaxRate: \"\",\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointment: match.params.appointment_id,\n                                      account: values.account,\n                                      price: values.price, \n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {\"organizationAppointment\": match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointment_prices.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentprice\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceAdd))","import React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_APPOINTMENT_PRICE_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\n\n\nconst UPDATE_APPOINTMENT_PRICE = gql`\n  mutation UpdateOrganizationAppointmentPrice($input: UpdateOrganizationAppointmentPriceInput!) {\n    updateOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentPriceEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const appointment_id = match.params.appointment_id\n    const category_id = match.params.category_id\n    const returnUrl = \"/organization/appointment_categories/\" + category_id + \"/appointments/prices/\" + appointment_id\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_prices.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_PRICE_QUERY} variables={{ id: id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointmentPrice\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialAccount = \"\"\n                    if (initialData.account) {\n                      initialAccount = initialData.account.id\n                    }\n\n                    let initialFinanceTaxRate = \"\"\n                    if (initialData.financeTaxRate) {\n                      initialFinanceTaxRate =  initialData.financeTaxRate.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_PRICE} onCompleted={() => history.push(returnUrl)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                account: initialAccount,\n                                price: initialData.price, \n                                financeTaxRate: initialFinanceTaxRate,\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      account: values.account,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {organizationAppointment: match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_prices.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentprice\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(returnUrl)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY)\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: archived});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: archived});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\n// const OrganizationClasspasses = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//          <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses/groups\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASSES_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationClasspasses: classpasses}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}>\n//                     <p>{t('organization.classpasses.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   {/* <Link to=\"/organization/classpasses/groups\">\n//                     <Button color='secondary'  \n//                             size=\"sm\"\n//                             icon=\"folder\"\n//                             // onClick={() => {archived=false; refetch({archived});}}>\n//                             >\n//                       {t('general.groups')}\n//                     </Button>\n//                   </Link>\n//                   <CardHeaderSeparator /> */}\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!classpasses.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={classpasses.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpasses.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspasses.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new memberships at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationMemberships: {\n//                                             __typename: previousResult.organizationClasspasses.__typename,\n//                                             edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpasses.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.displayPublic} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.displayShop} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.trialPass} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {(node.unlimited) ? t('general.unlimited') : node.classes }\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.priceDisplay} <br />\n//                                     {(node.financeTaxRate) ? \n//                                       <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n//                                       : \"\"\n//                                     }\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.validity} <br />\n//                                     <span className=\"text-muted\">\n//                                       {node.validityUnitDisplay}\n//                                     </span>\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                         title={t('general.archive')} \n//                                         href=\"\"\n//                                         onClick={() => {\n//                                           console.log(\"clicked archived\")\n//                                           let id = node.id\n//                                           archiveClasspass({ variables: {\n//                                             input: {\n//                                             id,\n//                                             archived: !archived\n//                                             }\n//                                     }, refetchQueries: [\n//                                         {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n//                                     ]}).then(({ data }) => {\n//                                       console.log('got data', data);\n//                                       toast.success(\n//                                         (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error);\n//                                     })\n//                                     }}>\n//                                       <Icon prefix=\"fa\" name=\"inbox\" />\n//                                     </button>\n//                                       </Table.Col>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspass\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpasses.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>      \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayShop\" \n                    checked={values.displayShop} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            organizationMembership: \"\",\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: values.validity,\n                  validityUnit: values.validityUnit,\n                  classes: values.classes,\n                  unlimited: values.unlimited,\n                  organizationMembership: values.organizationMembership,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASSES_QUERY, GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: values.validity,\n                  validityUnit: values.validityUnit,\n                  classes: values.classes,\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: String!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: node.description}} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditAccumulationDays\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditAccumulationDays\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived}\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_accumulation_days')}>\n                <Field type=\"text\" \n                      name=\"creditAccumulationDays\" \n                      className={(errors.creditAccumulationDays) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditAccumulationDays\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditAccumulationDays: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: values.sortOrder,\n                    minDuration: values.minDuration,\n                    classes: values.classes,\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: values.reconciliationClasses,\n                    creditAccumulationDays: values.creditAccumulationDays,\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }, refetchQueries: [\n                    {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTIONS_QUERY, GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id }\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditAccumulationDays: initialData.organizationSubscription.creditAccumulationDays,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: values.sortOrder,\n                  minDuration: values.minDuration,\n                  classes: values.classes,\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: values.reconciliationClasses,\n                  creditAccumulationDays: values.creditAccumulationDays,\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({t, match, history, msgConfirm, msgDescription, msgSuccess, deleteFunction, deleteFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm\"\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className=\"text-red\">\n        <Icon prefix=\"fe\" name=\"trash-2\" />\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  console.log(value)\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  console.log(event.target.value)\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log('fire refetch')\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean\n  \n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        isActive\n        urlImageThumbnailSmall\n        subscriptions(last: 2) {\n          edges {\n            node {\n              organizationSubscription {\n                id\n                name\n              }\n              dateStart\n              dateEnd\n            }\n          }\n        }\n        classpasses(last: 2) {\n          edges {\n            node {\n              id\n              organizationClasspass {\n                id\n                name\n              }\n              dateStart\n              dateEnd\n              classesRemaining\n              classesRemainingDisplay\n              isExpired\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch} = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.accounts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accounts.edges\n              const pageInfo = fetchMoreResult.accounts.pageInfo \n\n              return newEdges.length\n                ? {\n                    // Put the new accounts at the end of the list and update `pageInfo`\n                  accounts: {\n                    __typename: previousResult.accounts.__typename,\n                    edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptions) ? \n                      // This is a workaround that reserves the array. Not yet figured out how to get the sorting right on subqueries in the backend\n                      node.subscriptions.edges.slice(0).reverse().map(({ node: subscription }) => (\n                        <div>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpasses) ? \n                      // This is a workaround that reserves the array. Not yet figured out how to get the sorting right on subqueries in the backend\n                      node.classpasses.edges.slice(0).reverse().map(({ node: classpass }) => (\n                        <div>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='md' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: node.content}} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n      doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      {t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountClasspassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountClasspassForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Icon,\n  Button,\n  Table,\n  Text\n} from \"tabler-react\";\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../finance/invoices/queries\"\nimport FinanceInvoiceStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteFinanceInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoiceStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceNumber} <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(35)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    <Text.Small color=\"gray\">{moment(node.dateDue).format(dateFormat)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/finance/invoices/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_ACCOUNT_INVOICES_QUERY, variables: {accountId: accountId}},\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  console.log(data)\n  const account = data.account\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: \"\",\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_MEMBERSHIPS_QUERY = gql`\n  query AccountMemberships($after: String, $before: String, $accountId: ID!) {\n    accountMemberships(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationMembership {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_ACCOUNT_MEMBERSHIP_QUERY = gql`\n  query AccountMembership($id: ID!, $accountId: ID!, $after: String, $before: String, $archived: Boolean!) {\n    accountMembership(id:$id) {\n      id\n      organizationMembership {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query MembershipInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY } from \"./queries\"\n\nconst DELETE_ACCOUNT_MEMBERSHIP = gql`\n  mutation DeleteAccountMembership($input: DeleteAccountMembershipInput!) {\n    deleteAccountMembership(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst AccountMemberships = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_ACCOUNT_MEMBERSHIPS_QUERY} variables={{ archived: archived, accountId: match.params.account_id }}> \n        {({ loading, error, data, refetch, fetchMore }) => {\n          // Loading\n          if (loading) return <p>{t('general.loading_with_dots')}</p>\n          // Error\n          if (error) {\n            console.log(error)\n            return <p>{t('general.error_sad_smiley')}</p>\n          }\n\n          const account = data.account\n          const accountMemberships = data.accountMemberships\n\n          return (\n            <Container>\n              <Page.Header title={account.firstName + \" \" + account.lastName} >\n                <RelationsAccountsBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  <ContentCard \n                    cardTitle={t('relations.account.memberships.title')}\n                    pageInfo={accountMemberships.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: accountMemberships.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.accountMemberships.edges\n                          const pageInfo = fetchMoreResult.accountMemberships.pageInfo\n\n                          return newEdges.length\n                            ? {\n                                // Put the new accountMemberships at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                accountMemberships: {\n                                  __typename: previousResult.accountMemberships.__typename,\n                                  edges: [ ...previousResult.accountMemberships.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            : previousResult\n                        }\n                      })\n                    }} \n                  >\n                    <Table>\n                      <Table.Header>\n                        <Table.Row key={v4()}>\n                          <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n                          <Table.ColHeader></Table.ColHeader> \n                        </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                          {accountMemberships.edges.map(({ node }) => (\n                            <Table.Row key={v4()}>\n                              <Table.Col key={v4()}>\n                                {node.organizationMembership.name}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateStart}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateEnd}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                              </Table.Col>\n                              <Table.Col className=\"text-right\" key={v4()}>\n                                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/edit/\" + node.id}>\n                                  <Button className='btn-sm' \n                                          color=\"secondary\">\n                                    {t('general.edit')}\n                                  </Button>\n                                </Link>\n                              </Table.Col>\n                              <Mutation mutation={DELETE_ACCOUNT_MEMBERSHIP} key={v4()}>\n                                {(deleteAccountMembership, { data }) => (\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    <button className=\"icon btn btn-link btn-sm\" \n                                      title={t('general.delete')} \n                                      href=\"\"\n                                      onClick={() => {\n                                        confirm_delete({\n                                          t: t,\n                                          msgConfirm: t(\"relations.account.memberships.delete_confirm_msg\"),\n                                          msgDescription: <p>{node.organizationMembership.name} {node.dateStart}</p>,\n                                          msgSuccess: t('relations.account.memberships.deleted'),\n                                          deleteFunction: deleteAccountMembership,\n                                          functionVariables: { variables: {\n                                            input: {\n                                              id: node.id\n                                            }\n                                          }, refetchQueries: [\n                                            {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                                          ]}\n                                        })\n                                    }}>\n                                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                    </button>\n                                  </Table.Col>\n                                )}\n                              </Mutation>\n                            </Table.Row>\n                          ))}\n                      </Table.Body>\n                    </Table>\n                  </ContentCard>\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  <ProfileCardSmall user={account}/>\n                  <HasPermissionWrapper permission=\"add\"\n                                        resource=\"accountmembership\">\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/add\"}>\n                      <Button color=\"primary btn-block mb-6\">\n                              {/* //  onClick={() => history.push(\"/organization/memberships/add\")}> */}\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.memberships.add')}\n                      </Button>\n                    </Link>\n                  </HasPermissionWrapper>\n                  <ProfileMenu \n                    activeLink='memberships' \n                    account_id={match.params.account_id}\n                  />\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n    </div>\n  </SiteWrapper>\n)\n      \n        \nexport default withTranslation()(withRouter(AccountMemberships))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MEMBERSHIP_SCHEMA = Yup.object().shape({\n  organizationMembership: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  //   .nullable(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountMembershipForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.membership')}>\n            <Field component=\"select\" \n                  name=\"organizationMembership\" \n                  className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationMemberships.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n            {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountMembershipForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst CREATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation CreateAccountMembership($input: CreateAccountMembershipInput!) {\n    createAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note     \n      }\n    }\n  }\n`\n\n\nclass AccountMembershipAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const account_id = match.params.account_id\n    const returnUrl = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: account_id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_add')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={CREATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(returnUrl)}> \n                      {(createMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: \"\",\n                                financePaymentMethod: \"\",\n                                dateStart: new Date(),\n                                note: \"\",\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  createMembership({ variables: {\n                                    input: {\n                                      account: account_id, \n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"add\"\n                                          resource=\"accountmembership\">\n                      <Link to={returnUrl}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipAdd))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_ACCOUNT_MEMBERSHIP_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst UPDATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation UpdateAccountMembership($input: UpdateAccountMembershipInput!) {\n    updateAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\n\nclass AccountMembershipEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const id = match.params.id\n    const account_id = match.params.account_id\n    const returnUrl = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_ACCOUNT_MEMBERSHIP_QUERY} variables = {{archived: false,  accountId: account_id, id: id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n            const initialdata = data.accountMembership\n\n            let initialPaymentMethod = \"\"\n            if (initialdata.financePaymentMethod) {\n              initialPaymentMethod = initialdata.financePaymentMethod.id\n            }\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_edit')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={UPDATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(returnUrl)}> \n                      {(updateMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: initialdata.organizationMembership.id,\n                                financePaymentMethod: initialPaymentMethod,\n                                dateStart: initialdata.dateStart,\n                                dateEnd: initialdata.dateEnd,\n                                note: initialdata.note,\n                                registrationFeePaid: initialdata.registrationFeePaid\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  updateMembership({ variables: {\n                                    input: {\n                                      id: id,\n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                      registrationFeePaid: values.registrationFeePaid\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  returnUrl={returnUrl}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"change\"\n                                          resource=\"accountmembership\">\n                      <Link to={returnUrl}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipEdit))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Body>\n                  {(!pageInfo) ? '':\n                    (pageInfo.hasNextPage) ? \n                      <Button \n                        link\n                        onClick={onLoadMore} \n                        >\n                        {t('general.load_more')}\n                      </Button>\n                    : t('general.loaded_all')\n                  }\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: String!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: node.note}} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.Enddate && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.creditTotal}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n  ){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoaMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\";\n\nfunction SubscriptionCreditsMutationType({ t, mutationType }) {\n  switch (mutationType) {\n    case \"ADD\":  \n      return <Badge color=\"success\">+</Badge>\n    case \"SUB\":\n      return <Badge color=\"secondary\">-</Badge>\n    default:\n      return \"\"\n  }\n}\n\nexport default withTranslation()(SubscriptionCreditsMutationType)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        mutationType\n        mutationAmount\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    mutationType\n    mutationAmount\n    description\n    createdAt\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport SubscriptionCreditsMutationType from \"../../../../../ui/SubscriptionCreditsMutationType\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.mutation')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  mutationAmount: Yup.number()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.credits')}>\n              <Field type=\"number\" \n                      name=\"mutationAmount\" \n                      className={(errors.mutationAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mutationAmount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.subscriptions.credits.mutationType')}>\n              <Field component=\"select\" \n                     name=\"mutationType\" \n                     className={(errors.mutationType) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"ADD\">{t(\"general.add\")}</option>\n                <option value=\"SUB\">{t(\"general.subtract\")}</option>\n              </Field>\n              <ErrorMessage name=\"mutationType\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: \"ADD\",\n          mutationAmount: 0,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: accountSubscriptionCredit.mutationType,\n          mutationAmount: accountSubscriptionCredit.mutationAmount,\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n                {/* <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col> */}\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction RelationsB2BEditBase({ t, match, history, children, cardTitle=\"\" }) {\n  const returnUrl = \"/relations/b2b\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{cardTitle}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>                                    \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase>\n      <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase>\n      <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n  console.log(initialData)\n\n  return (\n    <RelationsB2BEditBase cardTitle={t('relations.b2b.title_edit')}>\n      <Formik\n        initialValues={{ \n          name: initialData.name,\n          phone: initialData.phone,\n          phone2: initialData.phone2,\n          address: initialData.address,\n          postcode: initialData.postcode,\n          city: initialData.city,\n          country: initialData.country,\n          emailBilling: initialData.emailBilling,\n          emailContact: initialData.emailContact,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let input_vars = {\n              id: businessId,\n              name: values.name,\n              phone: values.phone,\n              phone2: values.phone2,\n              address: values.address,\n              postcode: values.postcode,\n              city: values.city,\n              country: values.country,\n              emailBilling: values.emailBilling,\n              emailContact: values.emailContact,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration\n            }\n\n            updateBusiness({ variables: {\n              input: input_vars\n            }, refetchQueries: [\n                // Refetch list\n                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                // Refresh local cached results for this account\n                {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <RelationsB2BEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationAppointment\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationAppointment = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)\n  if (organizationAppointment) {\n    queryVars.organizationAppointment = organizationAppointment\n  } else {\n    queryVars.organizationAppointment = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst ScheduleAppointmentsFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Locations */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_locations\")}</option>\n      {data.organizationLocations.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n    {/* Appointments */}\n    {/* <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_appointments\")}</option>\n      {data.organizationAppointments.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select> */}\n  </div>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointmentsFilter))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query ScheduleAppointments(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationLocation: String\n    ){\n    scheduleAppointments(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationLocation: $organizationLocation\n    ){\n      date\n      appointments {\n        scheduleItemId\n        frequencyType\n        date\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions {\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationAppointments(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String, $archived: Boolean!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String, $archived: Boolean) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointments(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Badge,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleAppointmentsFilter from \"./ScheduleAppointmentsFilter\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_APPOINTMENT = gql`\n  mutation DeleteScheduleAppointment($input: DeleteScheduleAppointmentInput!) {\n    deleteScheduleAppointment(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nconst ScheduleAppointments = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_APPOINTMENTS_QUERY} variables={get_list_query_variables()}>\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <Container>\n              <p>{t('general.loading_with_dots')}</p>\n            </Container>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <Container>\n                <p>{t('general.error_sad_smiley')}</p>\n              </Container>\n            )\n          }\n          \n          // Empty list\n          if (!data.scheduleAppointments.length) { return (\n            <ContentCard cardTitle={t('schedule.appointments.title')}>\n              <p>\n                {t('schedule.appointments.empty_list')}\n              </p>\n            </ContentCard>\n          )} else {   \n          // Life's good! :)\n          return (\n            <Container>\n              <Page.Header title={t(\"schedule.title\")}>\n                <div className=\"page-options d-flex\">\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_location\")}>\n                    <Button \n                      icon=\"home\"\n                      tooltip=\"text\"\n                      className=\"mr-2\"\n                      color={\n                        ((localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY))) ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"location\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_starttime\")}>\n                    <Button \n                      icon=\"clock\"\n                      className=\"mr-2\"\n                      color={\n                        (localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"starttime\") ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"starttime\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <CSDatePicker \n                    className=\"form-control schedule-list-csdatepicker mr-2\"\n                    selected={new Date(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM))}\n                    isClearable={false}\n                    onChange={(date) => {\n                      let nextWeekFrom = moment(date)\n                      let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                      console.log(get_list_query_variables())\n\n                      refetch(get_list_query_variables())\n                    }}\n                    placeholderText={t('schedule.appointments.go_to_date')}\n                  />\n                  <Button.List className=\"schedule-list-page-options-btn-list\">\n                    <Button \n                      icon=\"chevron-left\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).subtract(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"sun\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let currentWeekFrom = moment()\n                        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                        \n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"chevron-right\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).add(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                  </Button.List> \n                </div>\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  { data.scheduleAppointments.map(({ date, appointments }) => (\n                    <div key={v4()}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>\n                            <b>{moment(date).format(\"dddd\")}</b> {' '}\n                            <span className=\"text-muted\">\n                              {moment(date).format(\"LL\")} \n                            </span>\n                          </Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                          {!(appointments.length) ? t('schedule.appointments.empty_list') :\n                            <Table>\n                              <Table.Header>\n                                <Table.Row key={v4()}>\n                                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.appointment')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                                  <Table.ColHeader></Table.ColHeader>\n                                </Table.Row>\n                              </Table.Header>\n                              <Table.Body>\n                                {appointments.map((\n                                  { scheduleItemId, \n                                    frequencyType,\n                                    date, \n                                    organizationLocationRoom, \n                                    organizationAppointment, \n                                    timeStart, \n                                    timeEnd,\n                                    displayPublic }) => (\n                                  <Table.Row key={v4()}>\n                                    <Table.Col>\n                                      {/* Start & end time */}\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} { ' ' }\n                                      {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null }\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Location */}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      <span className=\"text-muted\"> &bull; {organizationLocationRoom.name}</span>\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Type */}\n                                      {/* {organizationAppointment.name} <br /> */}\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Public */}\n                                      <BadgeBoolean value={displayPublic} />\n                                    </Table.Col>\n                                    <Table.Col>\n                                      <Dropdown\n                                        key={v4()}\n                                        className=\"pull-right\"\n                                        type=\"button\"\n                                        toggle\n                                        color=\"secondary btn-sm\"\n                                        triggerContent={t(\"general.actions\")}\n                                        items={[\n                                          <Dropdown.Item key={v4()}>Dropdown Link</Dropdown.Item>,\n                                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Dropdown.Item\n                                              key={v4()}\n                                              badge={t('schedule.appointments.all_appointments_in_series')}\n                                              badgeType=\"secondary\"\n                                              icon=\"edit-2\"\n                                              onClick={() => history.push('/schedule/appointments/all/edit/' + scheduleItemId)}>\n                                                {t(\"general.edit\")}\n                                            </Dropdown.Item>\n                                          </HasPermissionWrapper>,\n                                          <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Mutation mutation={DELETE_SCHEDULE_APPOINTMENT} key={v4()}>\n                                              {(deleteScheduleAppointment, { data }) => (\n                                                  <Dropdown.Item\n                                                    key={v4()}\n                                                    badge={t('schedule.appointments.all_appointments_in_series')}\n                                                    badgeType=\"danger\"\n                                                    icon=\"trash-2\"\n                                                    onClick={() => {\n                                                      confirm_delete({\n                                                        t: t,\n                                                        msgConfirm: t(\"schedule.appointments.delete_confirm_msg\"),\n                                                        msgDescription: <p key={v4()}>\n                                                          {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                                          {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                                          {organizationLocationRoom.organizationLocation.name} {' '}\n                                                          {organizationLocationRoom.name}\n                                                          </p>,\n                                                        msgSuccess: t('schedule.appointments.deleted'),\n                                                        deleteFunction: deleteScheduleAppointment,\n                                                        functionVariables: { variables: {\n                                                          input: {\n                                                            id: scheduleItemId\n                                                          }\n                                                        }, refetchQueries: [\n                                                          { query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables() }\n                                                        ]}\n                                                      })\n                                                  }}>\n                                                  {t(\"general.delete\")}\n                                                  </Dropdown.Item>\n                                              )}\n                                            </Mutation>\n                                          </HasPermissionWrapper>\n                                        ]}\n                                      />\n                                    </Table.Col>\n                                  </Table.Row>\n                                ))}\n                              </Table.Body>\n                            </Table>\n                          }\n                        </Card.Body>\n                      </Card>\n                    </div>\n                    ))}\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"scheduleclass\">\n                  <Button color=\"primary btn-block mb-1\"\n                          onClick={() => history.push(\"/schedule/appointments/add\")}>\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.appointments.add')}\n                  </Button>\n                </HasPermissionWrapper>\n                <div>\n                  <Button\n                    className=\"pull-right\"\n                    color=\"link\"\n                    size=\"sm\"\n                    onClick={() => {\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LEVEL, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION, \"\")\n                      refetch(get_list_query_variables())\n                    }}\n                  >\n                    {t(\"general.clear\")}\n                  </Button>\n                </div>\n                <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n                <ScheduleAppointmentsFilter data={data} refetch={refetch} />\n                <h5>{t(\"general.menu\")}</h5>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      )}}}\n      </Query>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nlet edit_active\nlet instructors_available_active\n\nconst AppointmentEditMenu = ({ t, activeLink, appointmentId }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'edit') ? edit_active = true: edit_active = false}\n        {(activeLink === 'instructors_available') ? instructors_available_active = true: instructors_available_active = false}\n        \n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >        \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/edit/\" + appointmentId}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t('general.edit')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >     \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/instructors_available/\" + appointmentId}\n              icon=\"users\"\n              active={instructors_available_active}\n              >\n              {t('general.instructors_available')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(AppointmentEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleAppointmentForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.appointments.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.appointments.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.appointments.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.appointments.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.appointments.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.appointment')}>\n          <Field component=\"select\" \n                name=\"organizationAppointment\" \n                className={(errors.organizationAppointment) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationAppointments.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationAppointment\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  */}\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.appointments.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleAppointmentForm))","import React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport ScheduleAppointmentForm from './ScheduleAppointmentForm'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\n\nconst CREATE_APPOINTMENT = gql`\n  mutation CreateScheduleAppointment($input:CreateScheduleAppointmentInput!) {\n    createScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment add add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n\n          <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <Container>\n                  <p>{t('general.loading_with_dots')}</p>\n                </Container>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <Container>\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </Container>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n\n              return (\n                <Container>\n                  <Page.Header title={t(\"schedule.title\")} />\n                  <Grid.Row>\n                    <Grid.Col md={9}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>{t('schedule.appointments.title_add')}</Card.Title>\n                        </Card.Header>\n                        <Mutation mutation={CREATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                  {(createSubscription, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: true,\n                        frequencyType: \"WEEKLY\",\n                        frequencyInterval: 1,\n                        organizationLocationRoom: \"\",\n                        dateStart: new Date(),\n                        timeStart: new Date(),\n                        timeEnd: new Date(),\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType === 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }\n                          \n                          createSubscription({ variables: {\n                            input: {\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_add_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                            <ScheduleAppointmentForm\n                              inputData={inputData}\n                              isSubmitting={isSubmitting}\n                              setFieldValue={setFieldValue}\n                              setFieldTouched={setFieldTouched}\n                              errors={errors}\n                              values={values}\n                              touched={touched}\n                              returnUrl={returnUrl}\n                            >\n                              {console.log('########## v & e')}\n                              {console.log(values)}\n                              {console.log(errors)}\n                              {console.log(touched)}\n                            </ScheduleAppointmentForm>\n                          )\n                        }\n                    </Formik>\n                    )}\n                  </Mutation>\n                </Card>\n                    </Grid.Col>\n                      <Grid.Col md={3}>\n                        <HasPermissionWrapper permission=\"add\"\n                                              resource=\"scheduleappointment\">\n                          <Button color=\"primary btn-block mb-6\"\n                                  onClick={() => history.push(returnUrl)}>\n                            <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                          </Button>\n                        </HasPermissionWrapper>\n                      </Grid.Col>\n                    </Grid.Row>\n                  </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst AppointmentEditBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/schedule/appointments\" \n          className='btn btn-outline-secondary btn-sm'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('schedule.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(AppointmentEditBack)","// @flow\n\nimport React, { Component } from 'react'\nimport { t } from 'i18next'\nimport { Query } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENT_QUERY } from \"../queries\"\n\nimport AppointmentEditMenu from './AppointmentEditMenu'\nimport AppointmentEditBack from './AppointmentEditBack';\nimport { appointment_edit_all_subtitle } from \"./tools\"\n\n\nclass AppointmentEditBase extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const appointmentId = match.params.appointment_id\n    const menu_activeLink = this.props.menu_activeLink\n    const default_card = this.props.default_card\n    const sidebar_button = this.props.sidebar_button\n\n    return (\n      <Query query={GET_APPOINTMENT_QUERY} variables = {{id: appointmentId, archived: false}} >\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <p>{t('general.loading_with_dots')}</p>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <p>{t('general.error_sad_smiley')}</p>\n            )\n          }\n          \n          console.log('query data')\n          console.log(data)\n          const initialValues = data.scheduleItem\n\n          const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n          const subtitle = appointment_edit_all_subtitle({\n            t: t,\n            location: initialValues.organizationLocationRoom.organizationLocation.name,\n            locationRoom: initialValues.organizationLocationRoom.name,\n            starttime: initialTimeStart\n          })\n          \n          return (\n            <Container>\n              <Page.Header \n                title={t(\"schedule.title\")} \n                subTitle={subtitle}\n              >\n                <AppointmentEditBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  {!default_card ? this.props.children :\n                    <Card>\n                      <Card.Header>\n                        <Card.Title>{this.props.card_title}</Card.Title>\n                      </Card.Header>\n                      <Card.Body>\n                        {this.props.children}\n                      </Card.Body>\n                    </Card>\n                  }\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  {sidebar_button}\n                  <AppointmentEditMenu activeLink={menu_activeLink} appointmentId={appointmentId}/>\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n)}}\n\nAppointmentEditBase.defaultProps = {\n  default_card: true,\n  sidebar_button: \"\",\n  card_title: t('schedule.appointments.title_edit')\n}\n\nexport default withTranslation()(withRouter(AppointmentEditBase))","import moment from 'moment'\n\nexport function appointment_edit_all_subtitle({t, location, locationRoom, starttime}) {\n  return t('general.appointment') + ': ' + location + ' (' + locationRoom + ') @ ' + moment(starttime).format('LT')\n}\n\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { APPOINTMENT_SCHEMA } from '../../yupSchema'\nimport ScheduleAppointmentForm from '../../ScheduleAppointmentForm'\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport AppointmentEditBase from '../AppointmentEditBase'\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateScheduleAppointment($input:UpdateScheduleAppointmentInput!) {\n    updateScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentEditAll extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.appointment_id\n    const returnUrl = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Query query={GET_APPOINTMENT_QUERY} variables = {{id: id, archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <AppointmentEditBase menu_activeLink=\"edit\">\n                  <p>{t('general.loading_with_dots')}</p>\n                </AppointmentEditBase>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <AppointmentEditBase menu_activeLink=\"edit\">\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </AppointmentEditBase>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n              const initialValues = data.scheduleItem\n\n              const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n              const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n              \n              return (\n                <AppointmentEditBase \n                  menu_activeLink=\"edit\"\n                >\n                  <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(returnUrl)}> \n                  {(updateScheduleAppointment, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: initialValues.displayPublic,\n                        frequencyType: initialValues.frequencyType,\n                        frequencyInterval: initialValues.frequencyInterval,\n                        organizationLocationRoom: initialValues.organizationLocationRoom.id,\n                        dateStart: initialValues.dateStart,\n                        dateEnd: initialValues.dateEnd,\n                        timeStart: initialTimeStart,\n                        timeEnd: initialTimeEnd,\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType === 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }  \n\n                          updateScheduleAppointment({ variables: {\n                            input: {\n                              id: id,\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                        <ScheduleAppointmentForm\n                          inputData={inputData}\n                          isSubmitting={isSubmitting}\n                          setFieldValue={setFieldValue}\n                          setFieldTouched={setFieldTouched}\n                          errors={errors}\n                          values={values}\n                          touched={touched}\n                          returnUrl={returnUrl}\n                        >\n                          {console.log('########## v & e')}\n                          {console.log(values)}\n                          {console.log(errors)}\n                          {console.log(touched)}\n                        </ScheduleAppointmentForm>\n                      )}\n                    </Formik>\n                    )}\n                  </Mutation>\n                </AppointmentEditBase>\n            )}}\n           </Query>\n         </div>\n      </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentEditAll))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    attendanceCountType: \"ATTENDING_AND_BOOKED\",\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(classes.length) ? <Card.Body>{t('schedule.classes.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {classes.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      role,\n                      account2,\n                      role2,\n                      organizationLocationRoom, \n                      organizationClasstype, \n                      organizationLevel,\n                      timeStart, \n                      timeEnd,\n                      displayPublic }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_class_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Type and level */}\n                        {organizationClasstype.name} <br />\n                        <small className=\"text-muted\">\n                          {(organizationLevel) ? organizationLevel.name: \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? \n                            represent_instructor(account.fullName, role) : \n                            <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Public */}\n                        <BadgeBoolean value={displayPublic} />\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"bar-chart-2\">\n                                    {t(\"schedule.classes.class.attendance_chart.title\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.classes.all_classes_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      {organizationClasstype.Name}\n                                      </p>,\n                                    msgSuccess: t('schedule.classes.deleted'),\n                                    deleteFunction: deleteScheduleClass,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\"\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: values.spaces,\n                  walkInSpaces: values.walkInSpaces\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n      scheduleItemType\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"dollar-sign\"\n              active={activeLink === 'prices'}\n              >\n              {t('general.prices')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime}) {\n  return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' + moment(starttime).format('LT')\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: values.spaces,\n                  walkInSpaces: values.walkInSpaces,\n                  infoMailContent: values.infoMailContent\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          fullName\n        }\n      }   \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = match.params.class_id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId)},\n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch({ variables: getAccountsQueryVariables(value)})\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n\n  \n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","import CSLS from \"../../../../../tools/cs_local_storage\"\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH)\n  queryVars.searchName = search\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables()})\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, class_date, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  class_date={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ]\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date)\n    }\n  )\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  return (\n    <ScheduleClassAttendanceBase>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      <ScheduleClassAttendanceDelete node={node} />\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary btn-sm\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          //   <Dropdown.Item\n                          //     key={v4()}\n                          //     icon=\"check\"\n                          //     onClick={() => {\n                          //       setAttendanceStatus({\n                          //         t: t, \n                          //         updateAttendance: updateAttendance,\n                          //         node: node,\n                          //         status: 'ATTENDING'\n                          //       })\n                          //       refetchAttendance()\n                          //     }}>\n                          //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                          //   </Dropdown.Item>\n                          // </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                match: match,\n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                class_date={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceQuery($year: Int!, $scheduleItem: ID!) {\n    insightClassAttendanceCountYear(year: $year, scheduleItem: $scheduleItem) {\n      description\n      dataCurrent\n      dataPrevious\n      year\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n\n  const year = parseInt(classDate.substring(0, 4))\n  console.log(year)\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  const dataLabelCurrentYear = year\n  const chartDataCurrentYear = data.insightClassAttendanceCountYear.dataCurrent\n  const dataLabelPreviousYear = year - 1\n  const chartDataPreviousYear = data.insightClassAttendanceCountYear.dataPrevious\n  const scheduleItem = data.scheduleItem\n  \n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  function range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n  }\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <Card.Body>\n          <C3Chart\n            style={{ height: \"16rem\" }}\n            data={{\n              x: 'x',\n              columns: [\n                // each columns data as array, starting with \"name\" and then containing data\n                [ 'x',\n                  ...range(54, 1) // This adds 1 .. 53\n                ],\n                [ 'current', ...chartDataCurrentYear],\n                [ 'previous', ...chartDataPreviousYear],\n              ],\n              type: \"bar\", // default type of chart\n              groups: [['current'], ['previous']],\n              colors: {\n                current: colors[\"azure\"],\n                previous: colors[\"azure-lighter\"],\n              },\n              names: {\n                // name of each serie\n                current: dataLabelCurrentYear,\n                previous: dataLabelPreviousYear\n              },\n              \n            }}\n            axis={{\n              y: {\n                padding: {\n                  bottom: 0,\n                },\n                show: true,\n                // Don't show decimals on ticks, only whole numbers\n                tick: {\n                  format: function (d) {\n                      return (parseInt(d) === d) ? d : null;\n                  }\n                }\n              },\n              x: {\n                padding: {\n                  left: 0,\n                  right: 0,\n                },\n                type: 'category',\n                show: true,\n              },\n            }}\n            tooltip={{\n              format: {\n                title: function(x) {\n                  return \"\";\n                },\n              },\n            }}\n            padding={{\n              bottom: 0,\n              // left: -1,\n              right: -1,\n            }}\n            point={{\n              show: false,\n            }}\n          />\n        </Card.Body>\n        <Card.Footer>\n          {/* {t(\"insight.revenue.total.explanation\")} */}\n        </Card.Footer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let returnUrl\n\n  if (returnTo === \"schedule_classes\") {\n    returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo === \"selfcheckin\") {\n    returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  console.log(schedule_item_id)\n  console.log(class_date)\n\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: schedule_item_id,\n                            date: class_date,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: values.spaces,\n                            walkInSpaces: values.walkInSpaces,\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={schedule_item_id}\n                class_date={class_date}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={t('schedule.classes.title_edit')}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n      <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendance\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: node.description}} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendance}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: values.spaces,\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: values.spaces,\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: node.description}} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, \n    `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName} <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges && <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link>\n                }\n                <small className=\"text-muted\">\n                  {node.invoiceItems.edges && node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) } <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://www.costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\nimport moment from 'moment'\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  Card,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status}) {\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    }\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const class_date = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, class_date)\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                              refetchAttendance()\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={CSLS.SELFCHECKIN_CHECKIN_SEARCH}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            getAccounts({ variables: get_accounts_query_variables()})\n          } else {\n            setShowSearch(false)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + class_date + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n      attendanceCountType: \"ATTENDING_AND_BOOKED\"\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: i.setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport SettingsBack from \"../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.mail.templates.title\")} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport SettingsBack from \"../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.mail.templates.title\")} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t('settings.mail.title')\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items: Array<navItem> = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  // const { error, loading, data, fetchMore } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport { TimeStringToJSDateOBJ } from '../../tools/date_tools'\n\n\nexport function DisplayClassInfo({t, classDate, classData, dateFormat, timeFormat }) {\n    return (\n      <div>\n        <b>\n          {moment(classDate).format(dateFormat)} {' '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n        </b>\n        {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n          classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_already_cancelled\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.already_cancelled\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_cancelation_not_possible\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_cancel.title\")}>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h5>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h5>\n            <DisplayClassInfo\n              t={t}\n              classDate={date}\n              classData={dataAttendance}\n              dateFormat={dateFormat}\n              timeFormat={timeFormat}\n            />\n            <br />\n            <Button\n              className=\"mr-4\"\n              color=\"warning\"\n              onClick={() =>\n                updateScheduleItemAttendance({ variables: {\n                  input: {\n                    id: attendanceId,\n                    bookingStatus: \"CANCELLED\"\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(\"/shop/account/classes\")\n                    toast.success((t('shop.account.class_cancel.success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                  })\n                }\n            >\n              {t(\"shop.account.class_cancel.confirm_yes\")}\n            </Button>\n            <Link to={\"/shop/account/classes\"}>\n              {t(\"shop.account.class_cancel.confirm_no\")}\n            </Link>\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n      t(\"general.loading_with_dots\")\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: data.scheduleClass.infoMailContent }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{node.invoiceNumber}</Card.Title>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.balance\")}</Table.ColHeader>\n                            <Table.Col>{node.balanceDisplay}</Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {(node.status === \"SENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        color=\"secondary\"\n                        icon=\"printer\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>              \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                financeTaxRate {\n                  id\n                  name\n                  percentage\n                  rateType\n                }\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.subscriptions.title')}\n            hasCardBody={false}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {subscriptions.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationSubscription.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      { (node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.classes.book.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Grid,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <p>{t('general.loading_with_dots')}</p>\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ', ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          { class_info }\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")}\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.classes.booked.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"general.continue\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      attendanceCountType: \"ATTENDING_AND_BOOKED\",\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col md={4}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col md={4}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col md={4}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Grid,\n  Table,\n} from \"tabler-react\";\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction capitalize(word) {\n  const lower = word.toLowerCase();\n  return word.charAt(0).toUpperCase() + lower.slice(1);\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={\n        <Button.List className=\"schedule-list-page-options-btn-list\">\n          <Button \n            icon=\"chevron-left\"\n            color=\"secondary\"\n            disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n            onClick={ () => {\n              let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n              let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n              \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n              refetch(get_list_query_variables())\n          }} />\n          <Button \n            color=\"secondary\"\n            onClick={ () => {\n              let currentWeekFrom = moment()\n              let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n              \n              refetch(get_list_query_variables())\n          }} > \n            {t(\"general.today\")}\n          </Button>\n          <Button \n            icon=\"chevron-right\"\n            color=\"secondary\"\n            onClick={ () => {\n              let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n              let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n              \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n              refetch(get_list_query_variables())\n          }} />\n        </Button.List> \n      }\n    >\n      \n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h4>\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                            </h4> \n                            { organizationClasstype.name } { (account) ? ' ' + t(\"general.with\") + ' ' + account.fullName : \"\" } <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\n\nimport {\n  Card, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  console.log(data)\n  console.log(data.organization)\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: organization.address}} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\nimport ShopEventsBase from \"./ShopEventsBase\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={node.dateStart}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n        {(eventTicket.isEarlybirdPrice) ? <div><Badge color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge></div> : \"\"}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        {(eventTicket.isEarlybirdPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport moment from 'moment'\n\nimport {\n  Card,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const title = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) return (\n    <ShopEventBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={title}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n  return (\n    <ShopEventBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{event.name}</h3>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: event.description}} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  const title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  console.log(data)\n  const eventTicket = data.scheduleEventTicket\n  console.log(eventTicket)\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h3>{eventTicket.scheduleEvent.name}</h3>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: eventTicket.description}} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html:node.content }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n      t(\"general.loading_with_dots\")\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","// @flow\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classes.title')}\n            hasCardBody={false}\n            pageInfo={scheduleItemAttendances.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleItemAttendances.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.schduleItemAttendances.edges\n                  const pageInfo = fetchMoreResult.schduleItemAttendances.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        schduleItemAttendances: {\n                          __typename: previousResult.schduleItemAttendances.__typename,\n                          edges: [ ...previousResult.schduleItemAttendances.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>  \n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      { moment(node.date).format(dateFormat) } <br />\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span>\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationClasstype.name }\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* TODO: improve this by adding a \"Can be cancelled field to GQL schema\" */}\n                      {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                        <div>\n                          <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                            <Button \n                              className=\"pull-right mr-r\"\n                              color=\"warning\"\n                              >\n                              {t(\"general.cancel\")}\n                            </Button>\n                          </Link>\n                          <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                            <Button\n                              className=\"pull-right\"\n                              color=\"secondary\"\n                              icon=\"info\"\n                            >\n                              {t(\"general.info\")}\n                            </Button>\n                          </Link>\n                        </div> : \"\"\n                      }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity}</b> {' '} {classpass.validityUnitDisplay}\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      {t(\"general.loading_with_dots\")}\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html:classpass.description}}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          {/* {((subscription.classes != 1) || (subscription.unlimited))? t('general.classes'): t('general.class')} / {t('general.month')} { \": \" } */}\n          {t('general.classes')} / {t('general.month')} { \": \" }\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> \n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \": \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: organizationSubscription.termsAndConditions}} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html:subscription.description}}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>    \n      <div className=\"text-center\">\n        <h5>{t('user.register.create_account')}</h5>\n        {t('user.register.create_account_msg')} <br />\n        {t('user.register.create_account_msg_click_below')} <br />\n      </div>\n      <Button \n        block\n        color=\"link\"\n        RootComponent=\"a\"\n        href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n          \"http://localhost:8000/d/accounts/signup/\" :\n          \"/d/accounts/signup/\"\n        } \n      >\n        {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Card,\n  Button,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"general.loading_with_dots\")}\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n  console.log(user)\n\n  if (!user.employee && !user.instructor) {\n    history.push(\"/\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\">\n          <Grid.Col md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionCreditExpiration \n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration'\nimport AutomationAccountSubscriptionCreditExpirationAdd\n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailTemplates from './components/settings/mail/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/SettingsMailTemplateEdit'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (authTokenExpired) {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    if (refreshTokenExp == null) {\n      console.log(\"refresh token not found\")\n      SetCurrentUrlAsNext()\n      \n      return LoginRequired\n    } else if ((new Date() / 1000) >= refreshTokenExp) {\n      console.log(\"refresh token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n      SetCurrentUrlAsNext()\n\n      return SessionExpired\n    } else {\n      // Refresh token\n      console.log(\"auth token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n\n      const refreshToken = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n      doTokenRefresh({ variables: { refreshToken: refreshToken }}).then(({ data }) => {\n        console.log('got refresh data', data)\n        CSAuth.updateTokenInfo(data.refreshToken)\n        return ContinueAsYouAre\n      }).catch((error) => {\n        toast.error(error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        console.log('there was an error refreshing the token', error) \n        SetCurrentUrlAsNext()\n        console.log(\"REDIRECT BACK TO LOGIN\")\n        window.location.href = \"/#/user/login\"\n        window.location.reload()\n      })\n    }\n  } else {\n    return ContinueAsYouAre\n  }\n  return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  console.log(appSettings)\n  let organization = dataOrganization.organization\n  console.log(organization)\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration\" \n                                component={AutomationAccountSubscriptionCreditExpiration} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration/add\" \n                                component={AutomationAccountSubscriptionCreditExpirationAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <PrivateRoute exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from '@apollo/client/link/context';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n  \n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Token refresh check\n  if (graphQLErrors && graphQLErrors[0].message === \"Signature has expired\") {\n    console.log(graphQLErrors[0])\n    console.log('Time to refresh the token')\n\n    let authTokenExpired = false\n    let refreshTokenExpired = false\n    const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n    if ((new Date() / 1000) >= tokenExp) {\n      authTokenExpired = true\n      \n      if ((new Date() / 1000) >= refreshTokenExp) {\n        refreshTokenExpired = true\n        // Remove any remaining token data\n        CSAuth.cleanup()\n        // Store current location, user has to login again\n        SetCurrentUrlAsNext()\n      }\n    }\n    \n    if (authTokenExpired && !refreshTokenExpired) {\n      console.log(\"refresh token... somehow...\")\n      console.log(localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN))\n\n      return new Observable(observer => {\n        client.mutate({\n          mutation: TOKEN_REFRESH,\n          variables: {\n            refreshToken: localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n          }\n        })\n          .then(({ data }) => { \n            console.log(data)\n            CSAuth.updateTokenInfo(data.refreshToken)\n          })\n          .then(() => {\n            const subscriber = {\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer)\n            };\n\n            // Retry last failed request\n            forward(operation).subscribe(subscriber);\n          })\n          .catch(error => {\n            // No refresh or client token available, we force user to login, after a cleanup\n            console.log(\"Failed to refresh the token, onwards to the login page\")\n            observer.error(error);\n            CSAuth.cleanup()\n            window.location.href = \"/#/user/login\"\n            window.location.reload()\n          });\n      })\n    } else if (refreshTokenExpired) {\n      window.location.href = \"#/user/session/expired\"\n      window.location.reload()\n    } else {\n      window.location.href = \"#/user/login/required\"\n      window.location.reload()\n    }\n  }\n})\n    \n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n});\n\nconst authLink = setContext(async (request, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `JWT ${token}`: ''\n    }\n  }\n});\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([errorLink, authLink, httpLink]),\n  cache: new InMemoryCache(),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport \"./c3jscustom.css\"\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}